/** 
 * Gestionnaire des feux de signalisation sur une RoadConnection
 */
package environnement

import java.util.ArrayList
import org.arakhne.afc.gis.road.primitive.RoadConnection

/** 
 * @author Nulboroth
 * 
 */
class LightRoadConnection {
	var point : RoadConnection //Point supervisé
	var timeCycle = 0 //Numéro du cycle actuel
	var trueTime = 0 // Temps en millisecondes passé depuis l'initialisation du nouveau cycle
	var openTime : int // Temps en secondes de durée des feux verts
	var secureTime : int // Temps en secondes de durée de la phase de tous les feux à rouge
	var cycle = 0 //Cycle actuel
	var lightPanelsPairs = new ArrayList<ArrayList<LightPanel>>() //Liste de paires de panneaux : une paire = un cycle. A chaque cycle une paire de feux sera vert
	var lightPanels = new ArrayList<LightPanel>() //Liste de tous les feux de la connection

	new (point : RoadConnection)  {
		this.point = point
		this.openTime = 5 
		this.secureTime = 3
	}
	new (point : RoadConnection, openTime : int, secureTime : int){
		this(point)
		this.openTime = openTime
		this.secureTime = secureTime
	}
	
	def getPoint() : RoadConnection{
		return this.point
	}
	def addLightPanel(panels : ArrayList<LightPanel>) : void
	{ 
		for(panel : panels)
		{
			addLightPanel(panel)
		}
	}
	def addLightPanel(panel : LightPanel) : void
	{
		this.lightPanels.add(panel)
		for (pairPanel : this.lightPanelsPairs)
		{
			if(pairPanel.size() < 2)
			{
				pairPanel.add(panel)
				return
			}
		} 
		var newPairOfLightPanel = new ArrayList<LightPanel>(2)
		newPairOfLightPanel.add(panel)
		this.lightPanelsPairs.add(newPairOfLightPanel)
		return
	}
	/**
	 * Incrémente le temps passé
	 * @param timeLoop Temps de la boucle de la Simulation
	 */
	def incrTimeCycle(timeLoop : int) : void
	{
		this.trueTime += timeLoop
		if(trueTime >= 1000) //A chaque seconde qui passe
		{
			trueTime = 0
			this.timeCycle++ //On incrémente d'une seconde le temps passé
			if (totalCycleTime == this.timeCycle) { //Quand le temps passé correspond à celui d'un cycle entier
				this.timeCycle = 0
				this.cycle++
				if (cycle >= lightPanelsPairs.size()) { //Retour à la première paire de panneaux si la dernière est atteinte et terminée
					this.cycle = 0
				}
				newCycle() //Création d'un nouveau cycle
			} else if (timeCycle == openTime) { //Si le temps passé correspond à celui de l'Opentime, on passe au closeTime
				closeWays()
			}
		}
	}
	/**
	 * Tous les feux de la connection passent au rouge
	 */
	def closeWays() : void
	{
		for (panel : lightPanelsPairs.get(cycle)) {
			panel.state = false
		}
	}
	/**
	 * Tous les feux de la paire actuelle passent au vert
	 */
	def newCycle() : void
	{
		for (panel : lightPanelsPairs.get(cycle))
		{
			panel.state = true
		}
	}
	def getTotalCycleTime() : int
	{
		return openTime + secureTime
	}
	def getTotalPairOfLightPanel() : int
	{
		return this.lightPanels.size()
	}
}