/** 
 * Agent d'environnement à lancer pour démarrer la simulation
 */
package environnement

import ^agent.Conducteur
import events.BeginLoop
import events.EndLoop
import events.IamAtHome
import events.NeedInfluence
import events.SendedInfluence
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.util.IdentifierScope
import java.util.ArrayList
import java.util.HashMap
import java.util.HashSet
import java.util.UUID
import java.util.concurrent.ConcurrentHashMap
import javafx.scene.paint.Color
import org.arakhne.afc.gis.road.layer.RoadNetworkLayer
import org.arakhne.afc.gis.road.path.RoadPath
import org.arakhne.afc.gis.road.path.astar.RoadAStar
import org.arakhne.afc.gis.road.primitive.RoadConnection
import org.arakhne.afc.gis.road.primitive.RoadSegment
import traficWindow.CarLayer
import traficWindow.RoadRenderer
import utils.Loader
import utils.PersonalizedRoadNetwork
import utils.ThreadComputer

import static extension traficWindow.RoadRenderer.*
import java.util.Collection

/** 
 * @author Nicolas
 * 
 */
@SuppressWarnings("potential_field_synchronization_problem")
agent Simulation{
	uses DefaultContextInteractions
	uses Behaviors
	
	var  roadNetwork : PersonalizedRoadNetwork
	var agents : ArrayList<UUID> = new ArrayList<UUID>
	var agentBodies : ConcurrentHashMap<UUID, Car> = new ConcurrentHashMap<UUID, Car> 
	var influences : ConcurrentHashMap<UUID, InfluenceAgent> = new ConcurrentHashMap<UUID, InfluenceAgent>
	var carAtHome : HashSet<UUID> = new HashSet<UUID>()
	var desiredNbModel : HashMap<String, Integer> = new HashMap()
	var actualNbModel : HashMap<String, Integer> = new HashMap()
	var definedModels : HashMap<String, CarModel> = new HashMap() 
	var timeloop : int = 1000
	var nbTimeSpaceInTimeLoop : int = 60
	var timespace : int = timeloop / nbTimeSpaceInTimeLoop
	var roadRenderer : RoadRenderer
	var lightRoadConnections = new ArrayList<LightRoadConnection>()
	
	on Initialize { 
		this.roadNetwork = Loader.loadShapeFile("ressources/Quartier.shp")
		RoadRenderer.roadLayer = new RoadNetworkLayer(this.roadNetwork);
		RoadRenderer.carLayer = new CarLayer(agentBodies.values());
		this.roadRenderer = ThreadComputer.startRoadRenderer()
		generateDefaultPanels()
		
		//ConfRenderer.render()

		//roadRenderer.test();
		var carModel1 = new CarModel(10, 20, 10, 10, new Color(0, 0.9, 0, 0), "TEST1", 300)
		var carModel2 = new CarModel(10, 20, 5, 5, new Color(0.9, 0, 0, 0), "TEST2", 150)
		
		addModel(carModel1)
		addModel(carModel2)
		this.desiredNbModel.put(carModel1.name, 0)
		this.desiredNbModel.put(carModel2.name, 1)
		wake(new BeginLoop)
		
	} 
	
	on BeginLoop {
		//System.out.println("CAR AT HOME ?")
		computeCarAtHome()
		//System.out.println("PROCESS NEW CARS")
		computeNewCars()
		this.carAtHome = new HashSet<UUID>()
		this.influences = new ConcurrentHashMap<UUID, InfluenceAgent>()
		// lightPanelProcess()
		//System.out.println("PROCESS PERCEPTIONS")
		if(this.agents.size > 0)
			computePerceptions()
		else
			wake(new EndLoop)
	}
	on EndLoop {
		//System.out.println("PROCESS INFLUENCE")
		for (var i = 0; i < nbTimeSpaceInTimeLoop; i++)
		{
			consumeInfluence()
			this.roadRenderer.update()
			Thread.sleep(this.timespace)
		}
		wake(new BeginLoop)
	}
	on SendedInfluence{
		this.influences.put(occurrence.source.UUID, occurrence.influence)

		//System.out.println("INFLUENCE SIZE : " + this.influences.size())
		//System.out.println("BODIES SIZE : " + this.agentBodies.size())
		if(this.influences.size() == this.agentBodies.size())
		{
			wake(new EndLoop)
		}
	}
	on IamAtHome{
		this.carAtHome.add(occurrence.source.UUID)
	}
	
	
	def computeNewCars()
	{ 
		var sizeImpasses = this.roadNetwork.impasses.size()
		//System.out.println(this.roadNetwork.impasses.size())
		for(var i = 0; i < sizeImpasses; i++)
		{
			var point = this.roadNetwork.impasses.get(i)
			if(point.getConnectedSegment(0).getUserDataCollection("CAR").size() > 0)
			{
				var carsOnTheSegment = point.getConnectedSegment(0).getUserDataCollection("CAR")
				var spawneurFree = true
				
				for(car : carsOnTheSegment)
				{
					if(car instanceof Car)
					{
						if(car.entryPoint == point)
						{
							if ((point == car.segment.beginPoint && car.position < 20) ||
								(point == car.segment.endPoint && car.position > car.segment.length - 20))
								spawneurFree = !spawneurFree
						}
					}
				}
				
				if(!spawneurFree)
					continue
			}
			var newCarModel = chooseModelForNewAgent()

			if(newCarModel == null)
			{
				break;
			}
			//System.out.println(newCarModel)
			addAgentToTheSimulation(newCarModel, i)
		}
	}
	def computeCarAtHome()
	{
		for (conduc : this.carAtHome) {
			removeAgentFromTheSimulation(conduc)
		}
	}
	def definesGPSPath(car : Car) : ArrayList<RoadSegment>{
		var roads : RoadPath = null
		var entryPoint = car.entryPoint
		var finalPoint : RoadConnection 
		do
		{
			var newTempID = Math.round(Math.random() * (this.roadNetwork.impasses.size() - 1)).intValue
			finalPoint = this.roadNetwork.impasses.get(newTempID)
		}
		while (finalPoint == entryPoint)

		var aStar = new RoadAStar()
		do
		{
			roads = aStar.solve(entryPoint.getPoint, finalPoint, this.roadNetwork)
		}
		while(roads == null)
		//System.out.println(roads)
		var newPathRoad : ArrayList<RoadSegment> = new ArrayList(roads.toArray())
		return newPathRoad
	}
	def redefinesGPSPath(car : Car) : ArrayList<RoadSegment>{
		if (car.gps.size() == 0)
			return car.gps
		var newPath = car.gps
		if (newPath.get(0) == car.segment) {
			newPath.remove(0) 
		}
		return newPath
	}
	def generateDefaultPanels()
	{
		this.roadNetwork.analizeNetwork
		for (point : this.roadNetwork.threeRoadConnections) {
			this.roadNetwork.addStopPanelOnThisRoadConnection(point)
		}
		for (point : this.roadNetwork.fourRoadConnections) {
			addLightPanelsOnThisRoadConnection(point)
		}
	}
	def addLightPanelsOnThisRoadConnection(point : RoadConnection){
		var lightPoint = new LightRoadConnection(point)
		var distance : float
		this.lightRoadConnections.add(lightPoint)
		for (segment : point.connectedSegments)
		{
			if(point == segment.getEndPoint)
			{
				distance = (segment.getDistanceToEnd(0) - 10).floatValue
			}
			else
			{
				distance = 10
			}
			lightPoint.addLightPanel(this.roadNetwork.addLightPanel(distance, segment, point, false))
		}
	}
	def lightPanelProcess(){
		for (lightPoint : this.lightRoadConnections)
		{
			lightPoint.incrTimeCycle()
		}
	}
	def chooseModelForNewAgent() : CarModel{
		var newModel : CarModel
		for (modelName : desiredNbModel.keySet)
		{
			var nbDesired = desiredNbModel.get(modelName)
			if (!actualNbModel.containsKey(modelName))
			{
				actualNbModel.put(modelName, 0)
			}
			var nbActual = actualNbModel.get(modelName)
			if(nbDesired > nbActual)
			{
				newModel = this.definedModels.get(modelName)
				return newModel
			}
		}
		return null
	}
	def addModel(model : CarModel){
		this.definedModels.put(model.name, model)
	}
	def removeModel(name : String){
		this.definedModels.remove(name)
	}
	def addAgentToTheSimulation(model : CarModel, idSpawneur : int){
		var id = spawn(Conducteur)
		var point = this.roadNetwork.impasses.get(idSpawneur)
		var segment = point.getConnectedSegment(0)
		var car = new Car(UUID.randomUUID, point, model)
		car.gps = definesGPSPath(car)
		this.agents.add(id)
		this.agentBodies.put(id, car)
		this.actualNbModel.put(model.name, this.actualNbModel.get(model.name) + 1)

		this.roadNetwork.addObjectToThisSegment("CAR", car, segment)
	}
	def removeAgentFromTheSimulation(id : UUID){
		var car = this.agentBodies.get(id)
		this.roadNetwork.removeObjectFromHisSegment("CAR", car) 
		
		this.agentBodies.remove(id)
		this.agents.remove(id)
		emit(new Destroy(), new IdentifierScope(id)) 

		this.agentBodies.remove(id)
		var model = car.model
		this.actualNbModel.put(model.name, this.actualNbModel.get(model.name) - 1)

	}
	def computePerceptions(){
		for(id : this.agents)
		{
			if (this.agentBodies.containsKey(id)) {
				var agentBody = this.agentBodies.get(id)
				var percepts = computePerceptionsFor(agentBody)
				emit(new NeedInfluence(percepts, agentBody), new IdentifierScope(id))
			}
		}
	}
	def computePerceptionsFor(body : Car) : HashSet<Percept> {
		//System.out.println("NEW PERCEPT COMPUTATION")
		var position = body.position
		var viewDistance = body.model.viewDistance
		var openList = new HashSet<RoadSegment>()
		return exploreSegments(body.entryPoint, body.segment, viewDistance, position, body, openList)
	}
	def roadObjectToPercept(objs : HashSet<AbstractStaticObject>, position : float) : HashSet<Percept>
	{
		var percepts : HashSet<Percept> = new HashSet<Percept>()
		for (obj : objs) {
			var distanceBetween = obj.position - position
			var type : String
			var data : Object
			var speed : float = 0
			if (distanceBetween < 0)
				distanceBetween *= -1
			/*System.out.println("OBJ : " + obj.position)
			System.out.println("SEG : " + obj.segment.length)
			System.out.println("CAR : " + position)
			System.out.println("BET : " + distanceBetween)*/
			
			if (obj instanceof StopPanel) {
				type = "STOP"
			}
			else if (obj instanceof LightPanel) {
				type = "LIGHT"
				data = obj.state
			} else if (obj instanceof SpeedPanel) {
				type = "SPEEDPANEL"
				data = obj.speed
			} else if (obj instanceof Car) {
				type = "CAR"
				data = obj.speed
			}		
			percepts.add(new Percept(type, distanceBetween, obj.segment, obj.entryPoint, data))
				
		}

		return percepts
	}
	def setDistancePerceptsHashSet(percepts : HashSet<Percept>, distance : float) : HashSet<Percept>
	{
		var newPercepts : HashSet<Percept> = new HashSet<Percept>
		for(percept : percepts)
		{
			newPercepts.add(new Percept(
				percept.type,
				percept.distance + distance,
				percept.segment, 
				percept.entryPoint,
				percept.data
			)) 
		}
		return newPercepts
	}

	def exploreSegments(entryPoint : RoadConnection, segment : RoadSegment, distance : float, position : float,
		body : AbstractStaticObject, openList : HashSet<RoadSegment>) : HashSet<Percept> {
		var bodyToEnd : float
		var restDisView : float
		var newPos : float = position
		var percepts = new HashSet<Percept>
		openList.add(segment) //Ajout du segment actuel à la liste ouverte des segments explorés
		
		//Dans le cas où la voiture explore "virtuellement" le segment (à distance)
		if (entryPoint == segment.beginPoint){
			if (newPos == -1) 
				newPos = 0
			bodyToEnd = segment.length.floatValue - newPos

		}
		else{
			if (newPos == -1) 
				newPos = segment.length.floatValue
			bodyToEnd = newPos
		}

		bodyToEnd = segment.length.floatValue - newPos
		restDisView = distance - bodyToEnd
		var visiblePercepts = new HashSet<AbstractStaticObject>
		var tempsPercepts = new HashSet<AbstractStaticObject>
		var unClassedPercepts = new ArrayList<AbstractStaticObject>
		
		//Récupération de tous les éléments du segment
		if (segment.hasUserData("PANEL"))
			unClassedPercepts.addAll(segment.getUserDataCollection("PANEL"))
		if (segment.hasUserData("CAR"))
			unClassedPercepts.addAll(segment.getUserDataCollection("CAR"))
		
		//On retire tout ce qui est dérrière la voiture ou qui est la voiture elle-même
		for (percept : unClassedPercepts)
		{
			if (percept.entryPoint == entryPoint && percept != body)
				tempsPercepts.add(percept)
		}

		
		//Si la voiture n'a pas la capacité de voir jusqu'au bout de la route
		if (restDisView < 0)
		{
			//Création d'une nouvelle variable contenant les éléments en vue
			if(entryPoint == segment.beginPoint)
			{
				for (obj : tempsPercepts) {
					if (segment.getDistanceFromStart(obj.position) <= distance)
						visiblePercepts.add(obj)
				}
			} 
			else
			{
				for (obj : tempsPercepts) {
					if (segment.getDistanceToEnd(obj.position) <= distance)
						visiblePercepts.add(obj)
				}
			}
			percepts = roadObjectToPercept(visiblePercepts, newPos)
			return percepts
		}
		//Si la voiture voit plus loin que la fin de la route
		else
		{
			var nextPoint : RoadConnection
			
			if (entryPoint == segment.beginPoint)
				nextPoint = segment.endPoint
			else
				nextPoint = segment.beginPoint
				
			percepts = roadObjectToPercept(tempsPercepts, newPos)			
			if(nextPoint != null)
			{
				var nbConnectedSegments = nextPoint.connectedSegments.size() //  for(segment : nextPoint.connectedSegments) provoque quelques fois une erreur
				//Recherche dans les segments connectés qui n'ont pas déjà été explorés
				for (var i = 0; i < nbConnectedSegments; i++) {
					var newSegment = nextPoint.getConnectedSegment(i)
					if (!(openList.contains(newSegment))){
						var newPercepts = exploreSegments(nextPoint, newSegment, restDisView, -1, body, openList)
						newPercepts = setDistancePerceptsHashSet(newPercepts, bodyToEnd)
						percepts.addAll(newPercepts)
					}
				}
			}
			return percepts
		}
	}
	def consumeInfluence()
	{
		for (conduc : this.agents) {
			if (this.agentBodies.containsKey(conduc)) {
				consumeInfluenceFor(agentBodies.get(conduc), influences.get(conduc)) 
			}
		}
	}
	def consumeInfluenceFor(car : Car,  influence : InfluenceAgent) {
		if(influence == null)
			return
		var roads = influence.roads
		var acceleration = influence.acceleration
		car.speed = car.speed + (acceleration / nbTimeSpaceInTimeLoop)
		var distance = (car.speed * (this.timespace/1000.0)).floatValue
		/*System.out.println("CAR : " + car)
		System.out.println("DISTANCE : " + distance)
		System.out.println("ROADS : " + roads.size())
		System.out.println("SPEED : " + car.speed)*/
		move(car, distance, roads)
	}
	def move(car : Car, distance : float, roads : ArrayList<RoadSegment>){
		var segment = car.segment
		var segmentBeginPoint = segment.beginPoint 
		var entryPoint = car.entryPoint
		var distanceRest : float
		var endPoint : RoadConnection
		var newPosition : float
		if (entryPoint == segmentBeginPoint)
		{
			distanceRest = (segment.length - car.position).floatValue
			endPoint = segment.endPoint
			newPosition = car.position + distance
		}
		else
		{
			distanceRest = car.position
			endPoint = segment.beginPoint
			newPosition = car.position - distance
		}

		if(0 > (distanceRest - distance))
		{
			if(roads.size() == 0)
			{
				if(endPoint == car.segment.endPoint)
					newPosition = car.segment.length.floatValue
				else
					newPosition = 0
				car.position = newPosition
			}
			else
			{
				var nextRoad = roads.get(0)

				this.roadNetwork.moveCarToSegment(car, nextRoad)
				roads.remove(0)
				car.entryPoint = endPoint 
				car.segment = nextRoad
				if (nextRoad.beginPoint == endPoint)
				{
					car.position = 0
				}
				else
				{
					car.position = nextRoad.length.floatValue
				}
				distanceRest = (distanceRest - distance) * -1
				move(car, distanceRest, roads)
			}
		}
		else
		{
			car.position = newPosition
			car.gps = redefinesGPSPath(car)
		}
	}
}