/** 
 * Agent d'environnement à lancer pour démarrer la simulation
 */
package environnement

import ^agent.Conducteur
import environnement.CarModel
import events.BeginLoop
import events.EndLoop
import events.GPSPath
import events.GPSPathReturn
import events.NeedInfluence
import events.SendedInfluence
import events.TargetReached
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.util.IdentifierScope
import java.util.ArrayList
import java.util.HashMap
import java.util.UUID
import org.arakhne.afc.gis.road.path.RoadPath
import org.arakhne.afc.gis.road.path.astar.RoadAStar
import org.arakhne.afc.gis.road.primitive.RoadConnection
import org.arakhne.afc.gis.road.primitive.RoadSegment
import utils.Loader
import utils.PersonalizedRoadNetwork
import traficWindow.RoadRenderer
import org.arakhne.afc.gis.road.layer.RoadNetworkLayer
import utils.ThreadComputer
import java.util.Arrays
import javafx.scene.paint.Color
import org.arakhne.afc.util.InformedArrayList;
import org.arakhne.afc.math.geometry.d2.d.Point2d;
import java.util.concurrent.ConcurrentHashMap
import traficWindow.CarLayer
import org.arakhne.afc.math.geometry.d2.d.Rectangle2d
import javafx.scene.paint.Color

/** 
 * @author Nicolas
 * 
 */
@SuppressWarnings("potential_field_synchronization_problem")
agent Simulation{
	uses DefaultContextInteractions
	uses Behaviors
	
	var  roadNetwork : PersonalizedRoadNetwork
	var agents : ArrayList<UUID> = new ArrayList<UUID>
	var agentBodies : ConcurrentHashMap<UUID, Car> = new ConcurrentHashMap<UUID, Car> 
	var influences : HashMap<UUID, InfluenceAgent> = new HashMap<UUID, InfluenceAgent>
	var desiredNbModel : HashMap<String, Integer> = new HashMap()
	var actualNbModel : HashMap<String, Integer> = new HashMap()
	var definedModels : HashMap<String, CarModel> = new HashMap()
	var timespace : int = 1000
	var roadRenderer : RoadRenderer
	var lightRoadConnections = new ArrayList<LightRoadConnection>()
	
	on Initialize { 
		this.roadNetwork = Loader.loadShapeFile("ressources/Quartier.shp")
		RoadRenderer.roadLayer = new RoadNetworkLayer(this.roadNetwork);
		RoadRenderer.carLayer = new CarLayer(agentBodies.values());
		 
		  
		this.roadRenderer = ThreadComputer.startRoadRenderer()
		generateDefaultPanels()
		
		//ConfRenderer.render()

		//roadRenderer.test();
		var carModel1 = new CarModel(10, 20, 20, 20, new Color(0,0,0, 0), "TEST", 150)
		addModel(carModel1)
		addAgentToTheSimulation(carModel1, 0)
		wake(new BeginLoop)
		/*
		//Car elements
		var car_elements : InformedArrayList<Point2d> = new InformedArrayList();
		car_elements.add(new Point2d(0.0, 20.0));
		car_elements.add(new Point2d(400.0, -310.0));
		this.roadRenderer.setCars(car_elements);
		//Traffic light panel
		var light_panel_elements : InformedArrayList<Point2d> = new InformedArrayList();
		light_panel_elements.add(new Point2d(185.0, -275.0));
		light_panel_elements.add(new Point2d(325.0, -147.0));
		var light_panel_state : InformedArrayList<Boolean> = new InformedArrayList();
		light_panel_state.add(true); //green light
		light_panel_state.add(false); //red light
		//Stop and speed panels
		var road_panel_elements : InformedArrayList<Point2d> = new InformedArrayList();
		road_panel_elements.add(new Point2d(-45.0, -335.0));
		road_panel_elements.add(new Point2d(185.0, -132.0));
		var road_panel_type : InformedArrayList<String> = new InformedArrayList();
		road_panel_type.add("stop");
		road_panel_type.add("speed");
		
		this.roadRenderer.setPannels(road_panel_elements, road_panel_type, light_panel_elements, light_panel_state);
		*/
	} 
	
	on BeginLoop{
		this.influences = new HashMap<UUID, InfluenceAgent>()
		this.roadRenderer.carLayer.update()
		//lightPanelProcess()
		computePerceptions()
	}
	on EndLoop{
		consumeInfluence()
		Thread.sleep(this.timespace)
		wake(new BeginLoop)
	}
	on SendedInfluence{
		this.influences.put(occurrence.source.UUID, occurrence.influence)
		if(this.influences.size() == this.agentBodies.size())
		{
			wake(new EndLoop)
		}
	}
	on TargetReached{
		var id = occurrence.source.UUID
		removeAgentFromTheSimulation(id)
	}
	def definesGPSPath(car : Car) : ArrayList<RoadSegment>{
		var roads : RoadPath = null
		var entryPoint = car.entryPoint
		var finalPoint : RoadConnection 
		do
		{
			var newTempID = Math.round(Math.random() * (this.roadNetwork.impasses.size() - 1)).intValue
			finalPoint = this.roadNetwork.impasses.get(newTempID)
		}
		while (finalPoint == entryPoint)

		var aStar = new RoadAStar()
		roads = aStar.solve(entryPoint.getPoint, finalPoint, this.roadNetwork)
		return new ArrayList(roads.toArray())
	}
	def generateDefaultPanels()
	{
		this.roadNetwork.analizeNetwork
		for (point : this.roadNetwork.threeRoadConnections) {
			addStopPanelOnThisRoadConnection(point)
		}
		for (point : this.roadNetwork.fourRoadConnections) {
			addLightPanelsOnThisRoadConnection(point)
		}
	}
	def addStopPanelOnThisRoadConnection(point : RoadConnection) {
		var randomNumSegment = (Math.random() * 2).intValue
		var segment = point.getConnectedSegment(randomNumSegment)
		var distance : float
		if (point == segment.getEndPoint) {
			distance = (segment.getDistanceToEnd(0) - 10).floatValue
		} else {
			distance = 10
		}
		addStopPanel(distance, segment, point)
	}
	def addLightPanelsOnThisRoadConnection(point : RoadConnection){
		var lightPoint = new LightRoadConnection(point)
		var distance : float
		this.lightRoadConnections.add(lightPoint)
		for (segment : point.connectedSegments)
		{
			if(point == segment.getEndPoint)
			{
				distance = (segment.getDistanceToEnd(0) - 10).floatValue
			}
			else
			{
				distance = 10
			}
			lightPoint.addLightPanel(addLightPanel(distance, segment, point, false))
		}
	}
	def lightPanelProcess(){
		for (lightPoint : this.lightRoadConnections)
		{
			lightPoint.incrTimeCycle()
		}
	}
	def addLightPanel(position : float, segment : RoadSegment, entryPoint : RoadConnection, state : boolean)
	{
		var id = UUID.randomUUID()
		var panel = new LightPanel(id, entryPoint, segment, position, state)
		this.roadNetwork.lightPanel.add(panel)
		addObjectToThisSegment("PANEL", panel, segment)
		return panel
	}
	def addSpeedPanel(position : float, segment : RoadSegment, entryPoint : RoadConnection, speedLimit : int)
	{
		var id = UUID.randomUUID()
		var panel = new SpeedPanel(id, entryPoint, segment, position, speedLimit)
		this.roadNetwork.speedPanel.add(panel)
		addObjectToThisSegment("PANEL", panel, segment)
		return panel
	}
	def addStopPanel(position : float, segment : RoadSegment, entryPoint : RoadConnection)
	{
		var id = UUID.randomUUID()
		var panel = new StopPanel(id, entryPoint, segment, position)
		this.roadNetwork.stopPanel.add(panel)
		addObjectToThisSegment("PANEL", panel, segment)
		return panel
	}
	def chooseModelForNewAgent() : CarModel{
		var newModel : CarModel
		for (modelName : desiredNbModel.keySet)
		{
			var nbDesired = desiredNbModel.get(modelName)
			var nbActual = actualNbModel.get(modelName)
			
			if(nbDesired > nbActual)
				return newModel
		}
		return null
	}
	def addModel(model : CarModel){
		this.definedModels.put(model.name, model)
	}
	def removeModel(name : String){
		this.definedModels.remove(name)
	}
	def addAgentToTheSimulation(model : CarModel, idSpawneur : int){
		var id = spawn(Conducteur)
		var point = this.roadNetwork.impasses.get(idSpawneur)
		var segment = point.getConnectedSegment(0)
		var car = new Car(UUID.randomUUID, point, model)
		car.gps = definesGPSPath(car)
		this.agents.add(id)
		this.agentBodies.put(id, car)
		if (this.actualNbModel.containsKey(model.name))
			this.actualNbModel.put(model.name, this.actualNbModel.get(model.name) + 1)
		else
			this.actualNbModel.put(model.name, 1)

		addObjectToThisSegment("CAR", car, segment)
	}
	def removeAgentFromTheSimulation(id : UUID){
		var car = this.agentBodies.get(id)
		removeObjectFromHisSegment("CAR", car)
		
		this.agentBodies.remove(id)
		this.agents.remove(id)
		emit(new Destroy(), new IdentifierScope(id)) 

		this.agentBodies.remove(id)
		var model = car.model
		if (this.actualNbModel.containsKey(model.name))
			this.actualNbModel.put(model.name, this.actualNbModel.get(model.name) + 1)
		else
			this.actualNbModel.put(model.name, 1)
	}
	def removeObjectFromHisSegment(type : String, obj : AbstractStaticObject) {
		obj.segment.removeUserData(type, obj)
	}
	def addObjectToThisSegment(type : String, obj : AbstractStaticObject, segment : RoadSegment){
		segment.addUserData(type, obj)
	}
	def moveCarToSegment(car : Car, segment : RoadSegment) {
		removeObjectFromHisSegment("CAR", car)
		addObjectToThisSegment("CAR", car, segment)
	}
	def computePerceptions(){
		for(id : this.agents)
		{
			if (this.agentBodies.containsKey(id)){
				var agentBody = this.agentBodies.get(id)
				var percepts = computePerceptionsFor(agentBody)
				emit(new NeedInfluence(percepts, agentBody), new IdentifierScope(id))
			}
		}
	}
	def computePerceptionsFor(body : Car) : ArrayList<AbstractStaticObject> {
		var position = body.position
		var viewDistance = body.model.viewDistance
		return exploreSegments(body.entryPoint, body.segment, viewDistance, position, body)
	}
	def exploreSegments(entryPoint : RoadConnection, segment : RoadSegment, distance : float, position : float, body : AbstractStaticObject) : ArrayList<AbstractStaticObject>{

		var restDisView : float
		var newPos : float = position
		var percepts = new ArrayList<AbstractStaticObject>
		if (entryPoint == segment.beginPoint) {
			if (newPos == -1)
				newPos = 0
			restDisView = distance - segment.getDistanceToEnd(newPos).floatValue

		} else {
			if (newPos == -1)
				newPos = segment.getDistanceToEnd(0).floatValue
			restDisView = distance - segment.getDistanceFromStart(newPos).floatValue

		}

		var tempsPercepts = new ArrayList<AbstractStaticObject>
		var unClassedPercepts = new ArrayList<AbstractStaticObject>
		if (segment.hasUserData("PANEL"))
			unClassedPercepts.addAll(segment.getUserDataCollection("PANEL"))
		if (segment.hasUserData("CAR"))
			unClassedPercepts.addAll(segment.getUserDataCollection("CAR"))
		
		for (percept : unClassedPercepts)
		{
			if (percept.entryPoint == entryPoint && percept != body)
				tempsPercepts.add(percept)
		}
		if (restDisView < 0)
		{
			if(entryPoint == segment.beginPoint)
			{
				for (obj : tempsPercepts) {
					if (segment.getDistanceFromStart(obj.position) <= distance  &&
						!tempsPercepts.contains(obj))
						tempsPercepts.add(obj)
				}
			}
			else
			{
				for (obj : tempsPercepts) {
					if (segment.getDistanceToEnd(obj.position) <= distance  && !tempsPercepts.contains(obj))
						tempsPercepts.add(obj)
				}
			}
			return percepts
		}
		else
		{
			var nextPoint : RoadConnection
			
			if (entryPoint == segment.beginPoint)
				nextPoint = segment.endPoint
			else
				nextPoint = segment.beginPoint
				
			percepts.addAll(tempsPercepts)
			for (newSegment : nextPoint.connectedSegments) {
				percepts.addAll(exploreSegments(nextPoint, newSegment, restDisView, -1, body))
			}
			return percepts
		}
	}
	def consumeInfluence()
	{
		for (conduc : this.agents) {
			if (this.agentBodies.containsKey(conduc)) {
				consumeInfluenceFor(agentBodies.get(conduc), influences.get(conduc))
			}
		}
	}
	def consumeInfluenceFor(car : Car,  influence : InfluenceAgent) {
		var roads = influence.roads
		var acceleration = influence.acceleration
		var actuSpeed = car.speed
		// var newVitesse = (acceleration * this.timespace) + actuSpeed
		var newVitesse = acceleration + actuSpeed
		move(car, newVitesse, roads)
	}
	def move(car : Car, distance : float, roads : ArrayList<RoadSegment>){
		System.out.println(car.position)
		var segment = car.segment
		var segmentBeginPoint = segment.beginPoint 
		var entryPoint = car.entryPoint
		var distanceRest : float
		var endPoint : RoadConnection
		if (entryPoint == segmentBeginPoint)
		{
			distanceRest = segment.getDistanceToEnd(car.position).floatValue
			endPoint = segment.endPoint
		}
		else
		{
			distanceRest = segment.getDistanceFromStart(car.position).floatValue
			endPoint = segment.beginPoint
		}
		
		
		if(distanceRest < distance)
		{
			/*if (endPoint.getConnectedSegmentCount == 1)
			{
				var idAgent : UUID
				
				for (id :  this.agentBodies.keySet())
					{
						if (this.agentBodies.get(id) == car)
						idAgent = id
				}
				removeAgentFromTheSimulation(idAgent)
			}*/
			var nextRoad = roads.get(0)
			roads.remove(0)
			car.entryPoint = endPoint
			if (nextRoad.beginPoint == endPoint)
				car.position = 0
			else
				car.position = nextRoad.length.floatValue

			move(car, (distance - distanceRest), roads)
		}
		else
		{
			car.position = car.position + distance
			moveCarToSegment(car, car.segment)
		}
	}
}