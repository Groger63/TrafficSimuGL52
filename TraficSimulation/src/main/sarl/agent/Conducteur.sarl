/** 
 * 
 */
package ^agent

import environnement.Car
import environnement.InfluenceAgent
import environnement.Percept
import events.IamAtHome
import events.NeedInfluence
import events.SendedInfluence
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Lifecycle
import java.util.HashSet
import java.util.UUID
import org.arakhne.afc.gis.road.primitive.RoadConnection
import utils.Converter

/** 
 * @author Nulboroth
 * Classe définissant l'agent-mind d'un conducteur
 */
@SuppressWarnings("potential_field_synchronization_problem")
agent Conducteur {
	uses Lifecycle
	uses DefaultContextInteractions
	
	var percepts : HashSet<Percept> //Perceptions de l'agent
	var seeking = new BehaviorSeeking()  //Comportement de Seeking de l'agent
	var arriving = new BehaviorArriving() //Comportement d'Arriving de l'agent
	var following = new BehaviorFollowing() //Comportement de Following de l'agent
	var body : Car //Corps de l'agent
	
	var maxSpeed : float//Vitesse maximale atteignable par l'agent
	

	on Destroy {
		killMe()
	}
	 
	/**
	 * Reçu à la fin du traitement des perceptions par l'environnement
	 */
	on NeedInfluence{
		this.percepts = occurrence.percepts
		this.body = occurrence.body
		if (this.maxSpeed == 0) //Dans le cas où l'agent ne possède pas encore de maxSpeed
			this.maxSpeed = this.body.maxSpeed //Il récupère le maxSpeed de son corps
		computeInfluence(occurrence.source.UUID) 
	} 
	/**
	 * Choisira le comportement à adopter selon le cas de figure qui se présente à l'agents
	 * param id UUID de l'environnement 
	 */
	def computeInfluence(id : UUID) : void
	{
		var selectedPath = this.body.gps //Récupération du contenu du GPS de la voiture
		var acc : float
		if(amIAtHome())  //Test : l'agent est-il à destination ?
		{
			acc = 0
			emit(new IamAtHome(true)) //Signale à l'environnement qu'il peut détruire le corps de l'agent
		}
		else
		{

			var maxSpeedTemp : Percept = null 
			var obstacleTemp : Percept = null
			var safetyDistance = (Converter.convertMStoKM(body.speed) / 10) * 6
			if (safetyDistance < 10)
				safetyDistance = 10
			
			//On cherche l'obstacle le plus proche
			for (percept : percepts) {
				// On ne retient que les Percept sur notre chemin
				if (selectedPath.contains(percept.segment) || (percept.segment == body.segment))
				{
					if (percept.distance < 50 && percept.type == "SPEED") {
						if (maxSpeedTemp === null || maxSpeedTemp.distance > percept.distance)
							maxSpeedTemp = percept
					}
					else if (percept.type == "CAR") {
						if (obstacleTemp === null || obstacleTemp.distance > percept.distance)
						{
							obstacleTemp = percept
						}
					}
					else if ((percept.type == "LIGHT" && (percept.data == false)) || percept.type == "STOP")
					{
						if (obstacleTemp === null || obstacleTemp.distance > percept.distance)
						{
							obstacleTemp = percept
						}
					}
				}
			} 

			// Dans le cas où un panneau de limitation de vitesse est présent
			if (maxSpeedTemp !== null && maxSpeedTemp.speed < this.body.maxSpeed) //Si l'agent doit réduire sa vitesse
			{
				this.maxSpeed = maxSpeedTemp.speed
			}
			else if (maxSpeedTemp !== null && maxSpeedTemp.speed > this.body.maxSpeed) // Sinon, il roule à sa vitesse maximum
			{
				this.maxSpeed = this.body.maxSpeed
			}
				
			
			//Dans le cas où un obstacle se présente
			if (obstacleTemp !== null)
			{
				if (obstacleTemp.speed == 0) //Si l'obstacle est immobile 
				{
					//Dans le cas où il s'agit d'un panneau STOP qui a été respecté, ne plus en tenir compte
					if (obstacleTemp.type == "STOP" && (this.body.speed < 0.5 || obstacleTemp.distance < 10) &&
						checkFreeRoad()) {
						this.percepts.remove(obstacleTemp)
						computeInfluence(id)
						return
					}
					//Sinon, ralentir à l'approche
					acc = this.arriving.run(this.body, obstacleTemp.distance, this.maxSpeed)
					
				}
				//Sinon (en général dans le cas des voitures) s'adapter à la vitesse de l'objet
				else
				{
					acc = this.following.run(this.body, obstacleTemp.distance, this.maxSpeed, obstacleTemp.speed)
				}
				
			}
			//Dans le cas où il n'y a aucun obstacle, rouler à la vitesse maximum
			else
			{
				acc = this.seeking.run(this.body, this.maxSpeed)				
			}
		}
		emit(new SendedInfluence(new InfluenceAgent(selectedPath, acc))) [it.UUID == id]//L'influence est envoyée à l'environnement
	}

	/**
	 * Dans le cas d'un STOP, vérifie si la voie est dégagée avant de s'avancer
	 */
	def checkFreeRoad : boolean {
		var checkConfirm = true
		var endPoint : RoadConnection
		if(this.body.entryPoint == this.body.segment.beginPoint)
			endPoint = this.body.segment.endPoint
		else 
			endPoint = this.body.segment.beginPoint
			
		for(percept : this.percepts)
		{
			if (percept.speed < this.body.speed && percept.segment != this.body.segment && percept.distance < 30 && percept.entryPoint != endPoint && percept.type == "CAR")
			{ 
				checkConfirm = false
			}
		}
		
		return checkConfirm
	}

	/**
	 * Vérifie si la voiture est bien arrivée à detination
	 */
	def amIAtHome : boolean {
		if (this.body.gps.size() == 0) {
			if (this.body.position >= this.body.segment.length - 5 || this.body.position <= 5) {
				if (this.body.entryPoint == this.body.segment.beginPoint &&
					this.body.position >= this.body.segment.length - 5) {
					return true 
				} else if (this.body.entryPoint == this.body.segment.endPoint && this.body.position <= 5) {
					return true
				}
			}
		}
		return false
	}
	
}