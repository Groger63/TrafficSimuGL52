/** 
 * Agent conducteur possédant un corps (Car)
 */
package ^agent

import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import java.util.UUID
import environnement.Car
import io.sarl.core.Lifecycle
import java.util.ArrayList
import environnement.Percept
import events.NeedInfluence
import environnement.InfluenceAgent
import io.sarl.core.DefaultContextInteractions
import events.SendedInfluence
import org.arakhne.afc.gis.road.primitive.RoadSegment
import environnement.AbstractStaticObject
import events.GPSPath
import events.GPSPathReturn
import org.arakhne.afc.gis.road.path.RoadPath

/** 
 * @author Nicolas
 * 
 */
agent Conducteur {
	uses Logging
	uses Lifecycle
	uses DefaultContextInteractions
	
	var percepts : ArrayList<RoadSegment>
	var influence : InfluenceAgent
	var seeking = new BehaviorSeeking()
	var following = new BehaviorFollowing()
	var body : Car
	var gpsPath : RoadPath = null
	
	var maxSpeed : float
	
	on Initialize {
		emit(new GPSPath())
	}

	on Destroy {
		killMe
	}
	
	on GPSPathReturn{
		this.gpsPath = occurrence.gpsPath
	}
	
	/* Reçu à la fin du traitement des perceptions par l'environnement */
	on NeedInfluence{
		this.percepts = occurrence.percepts
		this.body = occurrence.body
		computeInfluence()
	}
	
	def computeInfluence()
	{
		var acc : float
		var obj = NextObjectOnPath(percepts)
		computeMaxSpeed(percepts)
		if(this.gpsPath == null)
		{ 
			acc = 0
			emit(new GPSPath())
		}
		else if (obj != null){
			var distance = computeDistanceBefore(obj)
			acc = this.following.run(this.body, distance, this.maxSpeed)
		}
		else
			acc = this.seeking.run(this.body, this.maxSpeed)
		emit(new SendedInfluence(new InfluenceAgent(this.gpsPath, acc)))
	}
	
	def computeDistanceBefore(object : AbstractStaticObject) : float {
		var distance : float
		return distance
	}
	def NextObjectOnPath(roads : ArrayList<RoadSegment>) : AbstractStaticObject
	{
		
	}

	def computeMaxSpeed(segments : ArrayList<RoadSegment>) : float {
		return 0
	}
	
}