/** 
 * 
 */
package ^agent

import environnement.Car
import utils.Converter

/** 
 * @author Nicolas
 * 
 * Comportement que le conducteur adoptera lorsqu'une voiture se situera dans son champs de vision
 */
class BehaviorFollowing {
	def run(body : Car, distanceFromObject : float, maxSpeed : float, speedObject : float) : float
	{
		var safetyDistance = ((Converter.convertMStoKM(body.speed) / 10) * 6) + 10
		if (safetyDistance < 10)
			safetyDistance = 10
			
		return computeIDM(body.maxAcc, body.minAcc, distanceFromObject, body.speed, maxSpeed, speedObject,
			safetyDistance)
	
	}
	
	def computeIDM(
		maxAccAgent : float, //the maximal acceleration
		maxDesAgent : float, //the comfortable braking deceleration
		distanceFromObject : float, //the distance to the ahead object
		currSpeed : float,
		idealSpeed : float,
		speedObject : float,
		safetyDistance : float
	) : float
	{
		var finalAcc : float;
		var diffSpeed = currSpeed - speedObject
		var timeBeforeCollision = distanceFromObject / idealSpeed
		
		var firstPart = Math.pow(currSpeed/idealSpeed, 4)
		
		var secondPart1 = (safetyDistance + currSpeed * timeBeforeCollision) / distanceFromObject
		var secondPart2 = (currSpeed * diffSpeed) / (2 * distanceFromObject * Math.sqrt(maxAccAgent * maxDesAgent))
		
		var secondPart = Math.pow(secondPart1 + secondPart2, 2)

		var precal = (1 - firstPart - secondPart)
		
		if (precal > 0)
			finalAcc = (maxAccAgent * precal).floatValue
		else
			finalAcc = (maxDesAgent * precal).floatValue

		if (finalAcc < -maxDesAgent)
			finalAcc = -maxDesAgent
		if (finalAcc > maxAccAgent)
			finalAcc = maxAccAgent
		return finalAcc.floatValue
	}
	
}
