/** 
 * Agent d'environnement à lancer pour démarrer la simulation
 */
package environnement

import ^agent.Conducteur
import events.BeginLoop
import events.EndLoop
import events.IamAtHome
import events.NeedInfluence
import events.SendedInfluence
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import java.util.ArrayList
import java.util.HashMap
import java.util.HashSet
import java.util.UUID
import java.util.concurrent.ConcurrentHashMap
import org.arakhne.afc.gis.road.layer.RoadNetworkLayer
import org.arakhne.afc.gis.road.path.RoadPath
import org.arakhne.afc.gis.road.path.astar.RoadAStar
import org.arakhne.afc.gis.road.primitive.RoadConnection
import org.arakhne.afc.gis.road.primitive.RoadSegment
import traficWindow.CarLayer
import traficWindow.LightLayer
import traficWindow.RoadRenderer
import traficWindow.SpeedPanelLayer
import traficWindow.StopPanelLayer
import utils.Loader
import utils.ThreadComputer

import static traficWindow.RoadRenderer.*

import configurationwindow.Configuration
import configfile.CarConfig
import filter.FilterConfiguration

/** 
 * @author Nulboroth
 * 
 */
@SuppressWarnings("potential_field_synchronization_problem")
agent Simulation{
	uses DefaultContextInteractions
	uses Behaviors
	
	var  roadNetwork : PersonalizedRoadNetwork
	var agents : ArrayList<UUID> = new ArrayList<UUID>()
	var agentBodies : ConcurrentHashMap<UUID, Car> = new ConcurrentHashMap<UUID, Car>() 
	var influences : ConcurrentHashMap<UUID, InfluenceAgent> = new ConcurrentHashMap<UUID, InfluenceAgent>()
	var carAtHome : HashSet<UUID> = new HashSet<UUID>()
	var desiredNbModel : HashMap<String, Integer> = new HashMap()
	var actualNbModel : HashMap<String, Integer> = new HashMap()
	var definedModels : HashMap<String, CarModel> = new HashMap() 
	var timeloop : int = 150
	var nbTimeSpaceInTimeLoop : int = 5
	var timespace : int = timeloop / nbTimeSpaceInTimeLoop
	var roadRenderer : RoadRenderer
	var lightRoadConnections = new ArrayList<LightRoadConnection>()
	var typeSpeedPanel = new ArrayList<Integer>()
	
	on Initialize {

		Configuration.instance.launchConfigurationWindow
		
		synchronized(Configuration.getInstance()){
			Configuration.getInstance().wait();
		}
		
		if (Configuration.getInstance().shapeFile !== null && Configuration.getInstance().isValid()) {
			
			FilterConfiguration.getInstance().launchFilterWindow();
			var carsModels = Configuration.getInstance().getCarConfigList()
			for (newCarModel : carsModels)
			{
				addModel(newCarModel)
			}
			typeSpeedPanel.add(30)
			typeSpeedPanel.add(50)
			typeSpeedPanel.add(70)
			typeSpeedPanel.add(90)
			this.roadNetwork = Loader.loadShapeFile(Configuration.getInstance().shapeFile)
			generateDefaultPanels()
			RoadRenderer.roadLayer = new RoadNetworkLayer(this.roadNetwork);
			RoadRenderer.carLayer = new CarLayer(agentBodies.values());
			RoadRenderer.lightLayer = new LightLayer(this.roadNetwork.lightPanel);
			RoadRenderer.speedPanelLayer = new SpeedPanelLayer(this.roadNetwork.speedPanel);
			RoadRenderer.stopPanelLayer = new StopPanelLayer(this.roadNetwork.stopPanel);
			this.roadRenderer = ThreadComputer.startRoadRenderer()
	
			wake(new BeginLoop())
		}
	}  
	
	on BeginLoop {
		computeCarAtHome()
		computeNewCars()
		this.carAtHome = new HashSet<UUID>()
		this.influences = new ConcurrentHashMap<UUID, InfluenceAgent>()
		lightPanelProcess(timeloop)
		if(this.agents.size() > 0)
			computePerceptions()
		else
			wake(new EndLoop())
	}

	on SendedInfluence {
		this.influences.put(occurrence.source.UUID, occurrence.influence)

		if (this.influences.size() == this.agentBodies.size()) 
			wake(new EndLoop())
	}
	on EndLoop {
		for (var i = 0; i < nbTimeSpaceInTimeLoop; i++)
		{
			consumeInfluence()
			this.roadRenderer.update()
			Thread.sleep(this.timespace)
		}
		wake(new BeginLoop())
	}
	on IamAtHome{
		this.carAtHome.add(occurrence.source.UUID)
	}
	
	/**
	 * Ajoute les nouvelles voitures : en fait apparaitre une sur chaque "spawneur" (impasse) selon les besoins exprimés
	 */
	def computeNewCars() : void
	{ 
		var sizeImpasses = this.roadNetwork.impasses.size()
		for(var i = 0; i < sizeImpasses; i++)
		{
			var point = this.roadNetwork.impasses.get(i)
			if(point.getConnectedSegment(0).getUserDataCollection("CAR").size() > 0)
			{
				var carsOnTheSegment = point.getConnectedSegment(0).getUserDataCollection("CAR")
				var spawneurFree = true
				
				for(car : carsOnTheSegment)
				{
					if(car instanceof Car)
					{
						if(car.entryPoint == point)
						{
							if ((point == car.segment.beginPoint && car.position < 20) ||
								(point == car.segment.endPoint && car.position > car.segment.length - 20))
								spawneurFree = !spawneurFree
						}
					}
				}
				
				if(!spawneurFree)
					continue
			}
			var newCarModel = chooseModelForNewAgent()

			if(newCarModel === null)
			{
				break;
			}
			addAgentToTheSimulation(newCarModel, i)
		}
	}
	
	/**
	 * Supprime les corps, et leurs agents, qui sont arrivés à destination
	 */
	def computeCarAtHome() : void
	{
		for (conduc : this.carAtHome) {
			removeAgentFromTheSimulation(conduc)
		}
	}
	
	/**
	 * Définit un itinéraire à emprunter pour une voiture
	 * @param car Voiture dont on détermine l'itinéraire
	 * @return Liste des routes à emprunter
	 */
	def definesGPSPath(car : Car) : ArrayList<RoadSegment>{
		var roads : RoadPath = null
		var entryPoint = car.entryPoint
		var finalPoint : RoadConnection 
		do
		{
			var newTempID = Math.round(Math.random() * (this.roadNetwork.impasses.size() - 1)).intValue()
			finalPoint = this.roadNetwork.impasses.get(newTempID)
		}
		while (finalPoint == entryPoint)

		var aStar = new RoadAStar()
		do
		{
			roads = aStar.solve(entryPoint.getPoint(), finalPoint, this.roadNetwork)
		}
		while(roads === null)
		var newPathRoad : ArrayList<RoadSegment> = new ArrayList(roads.toArray())
		return newPathRoad
	}
	
	/**
	 * Redéfinit le chemin à emprunter par une voiture lorsqu'elle arrive au bout de son segment
	 * @param car Voiture concernée
	 * @return Nouvelle suite de routes à emprunter
	 */
	def redefinesGPSPath(car : Car) : ArrayList<RoadSegment>{
		if (car.gps.size() == 0)
			return car.gps
		var newPath = car.gps
		if (newPath.get(0) == car.segment) {
			newPath.remove(0) 
		}
		return newPath
	}
	
	/**
	 * Génère une signalisation par défaut sur le réseau routier
	 */
	def generateDefaultPanels() : void
	{
		this.roadNetwork.analizeNetwork()
		var max = typeSpeedPanel.size()
		for (segment : this.roadNetwork.roadSegments)
		{
			if(segment.length > 50)
			{
				
			var randomNumSpeed = Math.round(Math.random() * (max - 1)) as int
			this.roadNetwork.addSpeedPanelOnThisRoadSegment(segment, typeSpeedPanel.get(randomNumSpeed), (segment.length / 2) as float)

			}
		}
		for (point : this.roadNetwork.threeRoadConnections) {
			this.roadNetwork.addStopPanelOnThisRoadConnection(point)
		}
		for (point : this.roadNetwork.fourRoadConnections) {
			addLightPanelsOnThisRoadConnection(point)
		}
	}
	
	/**
	 * Ajoute des feux de signalisation sur la RoadConnection
	 * @param point RoadConnection ciblée
	 */
	def addLightPanelsOnThisRoadConnection(point : RoadConnection) : void {
		var lightPoint = new LightRoadConnection(point)
		var distance : float
		this.lightRoadConnections.add(lightPoint)
		for (segment : point.connectedSegments)
		{
			var endPoint : RoadConnection
			if(point == segment.getEndPoint())
			{
				distance = (segment.length - 5).floatValue()
				endPoint = segment.getBeginPoint()
			}
			else
			{
				distance = 5
				endPoint = segment.getEndPoint()
			}
			lightPoint.addLightPanel(this.roadNetwork.addLightPanel(distance, segment, endPoint, false))
		}
	}
	/**
	 * Signale aux feux de signalisation qu'un certain délais est passé
	 * @param time Délais en millisecondes écoulé
	 */
	def lightPanelProcess(time : int) : void{
		for (lightPoint : this.lightRoadConnections)
		{
			lightPoint.incrTimeCycle(time)
		}
	}
	
	/**
	 * Sélectionne un modèle pour un nouvel agent selon les modèles déjà en circulation
	 * @return Modèle à utiliser ou null si aucun modèle libre
	 */
	def chooseModelForNewAgent() : CarModel{ 
		var newModel : CarModel
		for (modelName : desiredNbModel.keySet())
		{
			var nbDesired = desiredNbModel.get(modelName)
			if (!actualNbModel.containsKey(modelName))
			{
				actualNbModel.put(modelName, 0)
			}
			var nbActual = actualNbModel.get(modelName)
			if(nbDesired > nbActual)
			{
				newModel = this.definedModels.get(modelName)
				return newModel
			}
		}
		return null
	}
	
	/**
	 * Ajoute un modèle dans la liste de ceux utilisables
	 * @param Modèle à ajouter
	 * @param Nombre de modèle maximum pouvant apparaitre dans la simulation
	 */
	def addModel(model : CarConfig) : void {
		var carmodel = new CarModel(model)
		this.definedModels.put(carmodel.name, carmodel)
		this.desiredNbModel.put(carmodel.name, model.getAgentNumber())
	}

	/**
	 * Supprime un modèle dans la liste de ceux utilisables
	 * @param Nom du modèle à retirer
	 */
	def removeModel(name : String) : void{
		this.definedModels.remove(name)
		this.desiredNbModel.remove(name)
	}
	
	/**
	 * Ajoute un nouvel agent et son corps dans la simulation
	 * @param model Modèle que le corps de l'agent doit utiliser
	 * @param idSpawneur Spawneur sur lequel devra apparaître l'agent
	 */
	def addAgentToTheSimulation(model : CarModel, idSpawneur : int) : void {
		var id = spawn(Conducteur)
		var point = this.roadNetwork.impasses.get(idSpawneur)
		var segment = point.getConnectedSegment(0)
		var car = new Car(UUID.randomUUID(), point, model)
		car.gps = definesGPSPath(car)
		this.agents.add(id)
		this.agentBodies.put(id, car)
		this.actualNbModel.put(model.name, this.actualNbModel.get(model.name) + 1)

		this.roadNetwork.addObjectToThisSegment("CAR", car, segment)
	}
	
	/**
	 * Retire un agent de la simulation
	 * @param UUID de l'agent
	 */
	def removeAgentFromTheSimulation(id : UUID) : void{
		var car = this.agentBodies.get(id)
		this.roadNetwork.removeObjectFromHisSegment("CAR", car) 
		
		this.agentBodies.remove(id)
		this.agents.remove(id)
		emit(new Destroy())[it.UUID == id]

		this.agentBodies.remove(id)
		var model = car.model
		this.actualNbModel.put(model.name, this.actualNbModel.get(model.name) - 1)

	}
	
	/**
	 * Envoit aux agents leurs perceptions
	 */
	def computePerceptions() : void {
		for(id : this.agents)
		{
			if (this.agentBodies.containsKey(id)) {
				var agentBody = this.agentBodies.get(id)
				var percepts = computePerceptionsFor(agentBody)
				emit(new NeedInfluence(percepts, agentBody)) [it.UUID == id]
			}
		}
	}
	
	/**
	 * Définit les perceptions pour un agent
	 * @param body Corps de l'agent
	 * @return Liste des perceptions de l'agent
	 */
	def computePerceptionsFor(body : Car) : HashSet<Percept> {
		var position = body.position
		var viewDistance = body.model.viewDistance
		var openList = new ArrayList<Road>()
		return exploreSegments(body.entryPoint, body.segment, viewDistance, position, body, openList)
	}
	
	/**
	 * Converti une liste d'objets routiers en une liste de perceptions 
	 * @param objs Liste des objets
	 * @param position Position du corps de l'agent sur le segment
	 * @return Liste des perceptions
	 */
	def roadObjectToPercept(objs : HashSet<AbstractStaticObject>, position : float) : HashSet<Percept>
	{
		var percepts : HashSet<Percept> = new HashSet<Percept>()
		for (obj : objs) {
			var distanceBetween = obj.position - position
			var type : String
			var data : Object
			var speed : float = 0
			if (distanceBetween < 0)
				distanceBetween *= -1

			if (obj instanceof StopPanel) {
				type = "STOP"
				data = null
				speed = 0
			}
			else if (obj instanceof LightPanel) {
				type = "LIGHT"
				data = obj.state
				speed = 0
			} else if (obj instanceof SpeedPanel) {
				type = "SPEED"
				data = null
				speed = obj.speed
			} else if (obj instanceof Car) {
				type = "CAR"
				data = null
				speed = obj.speed
			}		
			percepts.add(new Percept(type, distanceBetween, obj.segment, obj.entryPoint, data, speed))
				
		}

		return percepts
	}
	
	/**
	 * Redéfinit la distance entre des perceptions et l'agents
	 * @param percepts Liste des perceptions
	 * @param distance Position de l'agent sur le segment
	 * @return Nouvelle liste des perceptions
	 */
	def setDistancePerceptsHashSet(percepts : HashSet<Percept>, distance : float) : HashSet<Percept>
	{
		var newPercepts : HashSet<Percept> = new HashSet<Percept>()
		for(percept : percepts)
		{
			newPercepts.add(new Percept(
				percept.type,
				percept.distance + distance,
				percept.segment, 
				percept.entryPoint,
				percept.data,
				percept.speed
			)) 
		}
		return newPercepts
	}

	/**
	 * Retourne les perceptions recevables par l'agent
	 * @param entryPoint Point d'entrée de l'agent / de sa ligne de vue (dans le cas où il voit le contenu de segments sur lesquels il n'est pas placé)
	 * @param segment Segment sur lequel se trouve l'agent / sa ligne de vue
	 * @param distance Distance de vue restante
	 * @param position Position de l'agent / de sa ligne de vue sur le segment
	 * @param body Corps de l'agent (de façon à ne pas se percevoir soi-même)
	 * @param openList Liste des combinaisons RoadSegment/RoadConnection (point d'entrée) explorés
	 * @return Perceptions de l'agent
	 */
	def exploreSegments(entryPoint : RoadConnection, segment : RoadSegment, distance : float, position : float,
		body : AbstractStaticObject, openList : ArrayList<Road>) : HashSet<Percept> {
		var bodyToEnd : float
		var restDisView : float
		var newPos : float = position
		var percepts = new HashSet<Percept>()
		openList.add(new Road(entryPoint, segment)) // Ajout du segment actuel à la liste ouverte des segments explorés
		
		//Dans le cas où la voiture explore "virtuellement" le segment (à distance)
		if (entryPoint == segment.beginPoint){
			if (newPos == -1) 
				newPos = 0
			bodyToEnd = segment.length.floatValue() - newPos

		}
		else{
			if (newPos == -1) 
				newPos = segment.length.floatValue()
			bodyToEnd = newPos
		}

		restDisView = distance - bodyToEnd
		var visiblePercepts = new HashSet<AbstractStaticObject>()
		var tempsPercepts = new HashSet<AbstractStaticObject>()
		var unClassedPercepts = new ArrayList<AbstractStaticObject>()
		
		//Récupération de tous les éléments du segment
		if (segment.hasUserData("PANEL"))
			unClassedPercepts.addAll(segment.getUserDataCollection("PANEL"))
		if (segment.hasUserData("CAR"))
			unClassedPercepts.addAll(segment.getUserDataCollection("CAR"))
		
		//On retire tout ce qui est dérrière la voiture ou qui est la voiture elle-même
		for (percept : unClassedPercepts)
		{
			if ((percept.entryPoint == entryPoint) && (percept != body))
			{
				if (entryPoint == segment.beginPoint && body.position <= percept.position)
					tempsPercepts.add(percept)
				else if (entryPoint == segment.endPoint && body.position >= percept.position)
					tempsPercepts.add(percept)
			}
		}

		
		//Si la voiture n'a pas la capacité de voir jusqu'au bout de la route
		if (restDisView < 0)
		{
			//Création d'une nouvelle variable contenant les éléments en vue
			if(entryPoint == segment.beginPoint)
			{ 
				for (obj : tempsPercepts) {
					if (segment.getDistanceFromStart(obj.position) <= distance)
						visiblePercepts.add(obj)
				}
			} 
			else
			{
				for (obj : tempsPercepts) {
					if (segment.getDistanceToEnd(obj.position) <= distance)
						visiblePercepts.add(obj)
				}
			}
			return roadObjectToPercept(visiblePercepts, newPos)
		}
		//Si la voiture voit plus loin que la fin de la route
		else
		{
			var nextPoint : RoadConnection
			
			if (entryPoint == segment.beginPoint)
				nextPoint = segment.endPoint
			else
				nextPoint = segment.beginPoint
				
			percepts = roadObjectToPercept(tempsPercepts, newPos)			
			if(nextPoint !== null)
			{
				var nbConnectedSegments = nextPoint.connectedSegments.size() //  for(segment : nextPoint.connectedSegments) provoque quelques fois une erreur
				//Recherche dans les segments connectés qui n'ont pas déjà été explorés
				for (var i = 0; i < nbConnectedSegments; i++) {
					var newSegment = nextPoint.getConnectedSegment(i)
					if (!openList.contains(new Road(nextPoint, newSegment)) && newSegment != segment && newSegment != body.segment) {
						var newPercepts = exploreSegments(nextPoint, newSegment, restDisView, -1, body, openList)
						newPercepts = setDistancePerceptsHashSet(newPercepts, bodyToEnd)
						percepts.addAll(newPercepts)
					}
				}
			}
			return percepts
		}
	} 
	
	/**
	 * Traite l'influence des agents
	 */
	def consumeInfluence() : void
	{
		for (conduc : this.agents) {
			if (this.agentBodies.containsKey(conduc)) {
				consumeInfluenceFor(agentBodies.get(conduc), influences.get(conduc)) 
			}
		}
	}
	
	/**
	 * Traite l'influence de l'agent
	 * @param car Corps de l'agent à traiter
	 * @param influence Influence reçue de la part de l'agent
	 */
	def consumeInfluenceFor(car : Car,  influence : InfluenceAgent) : void {
		if(influence === null)
			return
		var roads = influence.roads
		var acceleration = influence.acceleration
		car.speed = car.speed + (acceleration / nbTimeSpaceInTimeLoop)
		if(car.speed > car.maxSpeed)
			car.speed = car.maxSpeed
		if (car.speed < -car.maxSpeed)
			car.speed = 0
		var distance = (car.speed * (this.timespace / 1000.0)).floatValue()
		move(car, distance, roads)
	}
	
	/**
	 * Bouge la voiture sur les segments que l'agent a sélectionnés
	 * @param car Corps de l'agent à bouger
	 * @param distance Distance que parcourt l'agent
	 * @param roads Routes sur lesquelles l'agent désire avancer
	 */
	def move(car : Car, distance : float, roads : ArrayList<RoadSegment>) : void {
		var segment = car.segment
		var segmentBeginPoint = segment.beginPoint 
		var entryPoint = car.entryPoint
		var distanceRest : float
		var endPoint : RoadConnection
		var newPosition : float
		
		if (entryPoint == segmentBeginPoint)
		{
			distanceRest = (segment.length - car.position).floatValue()
			endPoint = segment.endPoint
			newPosition = car.position + distance
		}
		else
		{
			distanceRest = car.position
			endPoint = segment.beginPoint
			newPosition = car.position - distance
		}

		if(0 > (distanceRest - distance)) //Dans le cas où la distance à parcourir est plus grande que celle restante sur le segment
		{
			if(roads.size() == 0) //Dans le cas où l'agent n'a pas définit de route suivante et où la distance à parcourir est supérieure à celle disponible (L'agent est donc arrivé à destination
			{
				if(endPoint == car.segment.endPoint)
					newPosition = car.segment.length.floatValue()
				else
					newPosition = 0
				car.position = newPosition
			}
			else //Dans le cas où l'agent poursuit sur le segment suivant
			{
				var nextRoad = roads.get(0)

				this.roadNetwork.moveCarToSegment(car, nextRoad)
				roads.remove(0)
				car.entryPoint = endPoint 
				car.segment = nextRoad
				if (nextRoad.beginPoint == endPoint)
				{
					car.position = 0
				}
				else
				{
					car.position = nextRoad.length.floatValue()
				}
				distanceRest = (distanceRest - distance) * -1
				move(car, distanceRest, roads)
			}
		}
		else
		{
			car.position = newPosition
			car.gps = redefinesGPSPath(car)
		}
	}
}